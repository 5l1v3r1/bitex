[build-system]
requires = ["flit"]
build-backend = "flit.buildapi"

######################
# FLIT CONFIGURATION #
######################

[tool.flit.metadata]
# General Meta data
dist-name = "bitex"
module = "bitex"
author = "Nils Diefenbach"
author-email = "nlsdfnbch.foss@kolabnow.com"
home-page = "https://github.com/crypto-toolbox/bitex"
description-file = "README.rst"

# Pypi Requirements
requires-python = ">3.6"
requires = [
    'requests',
    'pluggy',
]

# Classifiers, Licensing, keywords for pypi.
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
]
keywords = "bitex, crypto, api, interface, api-wrapper, bitcoin, exchange, trading"

[tool.flit.metadata.requires-extra]
# Extended dependencies required for development and testing. Flit installs these automatically.
test = ["pytest", "pytest-cov", "tox"]
docs = ["sphinx"]
dev = [
  "black",
  "isort",
  "tox",
]


[tool.flit.metadata.urls]
# All sorts of URLs to display on the pypi page.
GitHub = "https://github.com/crypto-toolbox/bitex/issues"
"Bug Tracker" = "https://github.com/crypto-toolbox/bitex/issues"

[tool.flit.scripts]
# CLI commands installed along with our package.


#######################
# TOOL CONFIGURATIONS #
#######################

[tool.isort]
line_length = 99
known_future_library = "future"
known_first_party = "bitex"
default_section = "THIRDPARTY"
combine_as_imports = true
import_heading_stdlib = "Built-in"
import_heading_thirdparty = "Third-party"
import_heading_firstparty = "Home-brew"

# black compatibility
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true

[tool.black]
line-length = 99
target-version = ['py37']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | tests
  | docs
)/
'''

[tool.bumpversion]
# current_version must be given using the CLI flag `--current-version` and parsed from `bitex.__version__`
# Note: Since tomlkit doesn't recognize `r""` raw strings, we must escape our back slashes.
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)-?(?P<release_type>[dev|nightly|rc|stable]?)(?P<iteration>\\d*)"
serialize = [
    "{major}.{minor}.{patch}-{release_type}{iteration}",
    "{major}.{minor}.{patch}-{release_type}",
    "{major}.{minor}.{patch}",
]
tag = true
commit = true
message = "Cut New Release: {current_version} â†’ {new_version}"

[tool.bumpversion.part.release_type]
# ther order here is secondary, really - bumpversion will always be called explicitly
# with the `release_type` part.
values = [
    "dev",
    "nightly",
    "rc",
    "stable",
]
optional_value = "stable"

[tool.bumpversion.part.iteration]
first_value = "1"

[tool.bumpversion.file."bitex/__init__.py"]
search = "__version__ = {current_version}"
replace = "__version__ = {new_version}"
